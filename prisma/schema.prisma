// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId 
  name String?
  email String? @unique
emailVerified DateTime?
isEmailVerified Boolean @default(false)
image String?
hashedPassword String?
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
favoriteIds String[] @db.ObjectId
isManager Boolean? @default(false)
accounts Account[]
listings Listing[]
messages Message[]
reservations Reservation[]
conversationIds String[] @db.ObjectId
conversations Conversation[] @relation(fields: [conversationIds], references: [id])
partialLogin Boolean  @default(false)
payments Payment[] @relation("UserPayments")
 verificationCode         String?   @default("")
  verificationCodeExpires  DateTime? @default(now())
  lverificationCode         String?   @default("")
  lverificationCodeExpires  DateTime? @default(now())
  oneTimeLoginToken String?
  oneTimeLoginTokenExpires DateTime? @default(now())
contactIds       String[]    @db.ObjectId

reviews  Review[] 
ratings  Rating[]
}

model Account{
  id String @id @default(auto()) @map("_id") @db.ObjectId 
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

  user User @relation(fields:[userId], references:[id], onDelete: Cascade)

@@unique([provider,providerAccountId])

}

model Listing{
  id String @id @default(auto()) @map("_id") @db.ObjectId 
  title String
  description String
  imgSrc String
  createdAt DateTime @default(now())
  category String
  roomCount Int
  bathroomCount Int
  guestCount Int
  location String
  userId String @db.ObjectId
  price Int

 reviews  Review[] @relation("ListingReviews")
  ratings  Rating[] @relation("ListingRatings")


  user User @relation(fields: [userId], references: [id], onDelete:Cascade)
  reservations Reservation[]
}

model Reservation{
  id String @id @default(auto()) @map("_id") @db.ObjectId 
  userId String @db.ObjectId
  listingId String @db.ObjectId
  startDate DateTime
  endDate DateTime
  totalPrice Int
  isPaid Boolean @default(false)
  createdAt DateTime @default(now())
 payments Payment[] @relation("ReservationPayments")
user User @relation(fields: [userId], references: [id], onDelete:Cascade)
listing Listing @relation(fields: [listingId],references: [id], onDelete:Cascade)

}

model Conversation {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name String?
  isGroup Boolean?
  
  messagesIds String[] @db.ObjectId
  messages Message[]

  userIds String[] @db.ObjectId
  users User[] @relation(fields: [userIds], references: [id])
}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  body String?
  image String?
  createdAt DateTime @default(now())

  seenIds String[] @db.ObjectId
 

  conversationId String @db.ObjectId
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  senderId String @db.ObjectId
  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model Rating {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  value     Float
  userId    String  @db.ObjectId
  listingId String @db.ObjectId
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  listing   Listing  @relation(fields: [listingId], references: [id], name: "ListingRatings")
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  userId    String  @db.ObjectId
  listingId String @db.ObjectId
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  listing   Listing  @relation(fields: [listingId], references: [id], name: "ListingReviews")
}

model Payment {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  userId          String     @db.ObjectId
  reservationId   String     @db.ObjectId
  amount          Int
   cardholderName String?
  cardNumber      String?
  expiryDate      String?
  status          String?
  paymentMethod   String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade, name: "UserPayments")
  reservation     Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade, name: "ReservationPayments")

  @@index([reservationId], name: "idx_payment_reservation")
  @@index([userId], name: "idx_payment_user")
}
